/*
	This is a modified version of Recipe 15.10 that generates initial
	spatial positions anywhere on land, rather than just clustered
	around a specific map location.  This would be easy to do with a
	for loop over individuals, with a do-while loop run for each
	individual to keep drawing new positions until a position on land
	is drawn.  However, this code is much smarter: it vectorizes the
	redrawing process.  This should run much more quickly than the
	naive version, for large population sizes.  More generally, it
	demonstrates how to vectorize an operation that might require a
	different number of iterations for different elements of the
	vector being operated upon; elements that have been completed
	are removed, and the remaining vector is iterated again.
	
	Ben Haller, 13 September 2019
	
	
	UPDATE: The built-in method pointUniformWithMap() now does this;
	the loop under "// start anywhere on land" can now be replaced
	with the single line:
	
	p1.individuals.setSpatialPosition(p1.pointUniformWithMap(1000, "world"));
	
	However, this model illustrates a useful and general technique
	for vectorization of complex operations, so I'm going to keep
	it in SLiM-Extras.
	
	Ben Haller, 28 March 2025
*/

initialize() {
	initializeSLiMOptions(dimensionality="xy");
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=30.0);
	i1.setInteractionFunction("n", 5.0, 10.0);
	
	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=30.0);
	i2.setInteractionFunction("n", 1.0, 10.0);
}
1 late() {
	sim.addSubpop("p1", 1000);
	
	p1.setSpatialBounds(c(0.0, 0.0, 539.0, 216.0));
	
	// this file is in the recipe archive at http://benhaller.com/slim/SLiM_Recipes.zip
	mapImage = Image("~/Desktop/world_map_540x217.png");
	p1.defineSpatialMap("world", "xy", 1.0 - mapImage.floatK,
		valueRange=c(0.0, 1.0), colors=c("#0000CC", "#55FF22"));
	
	// BCH 3/28/2025: This is the modern version of the positioning code below!
	//p1.individuals.setSpatialPosition(p1.pointUniformWithMap(1000, "world"));
	
	// start anywhere on land
	leftToDraw = p1.individuals;
	
	while (size(leftToDraw) > 0)
	{
		positions = p1.pointUniform(size(leftToDraw));
		onLand = p1.spatialMapValue("world", positions) == 1.0;
		onLandCount = sum(onLand);
		
		if (onLandCount > 0)
		{
			onLandPositions = positions[repEach(onLand, 2)];
			leftToDraw[seqLen(onLandCount)].setSpatialPosition(onLandPositions);
			leftToDraw = leftToDraw[seqLen(size(leftToDraw) - onLandCount) + onLandCount];
		}
	}
}
1: late() {
	i1.evaluate(p1);
	inds = sim.subpopulations.individuals;
	competition = i1.totalOfNeighborStrengths(inds) / size(inds);
	competition = pmin(competition, 0.99);
	inds.fitnessScaling = 1.0 - competition;
	
	i2.evaluate(p1);
}
1: mateChoice() {
	return i2.strength(individual);
}
modifyChild() {
	do pos = parent1.spatialPosition + rnorm(2, 0, 2.0);
	while (!p1.pointInBounds(pos));
	
	// prevent dispersal into water
	if (p1.spatialMapValue("world", pos) == 0.0)
		return F;
	
	child.setSpatialPosition(pos);
	return T;
}
2000 late() { sim.outputFixedMutations(); }
