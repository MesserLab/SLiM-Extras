Calculates pi (a metric of genetic diversity based on pairwise sequence differences) for a vector of genomes, based upon the mutations in the genomes. The mathematical formulation (as an estimator of the population parameter theta) is based on work in (Nei and Li 1979; Nei and Tajima 1981; Tajima 1983 (eq. A3)) and the exact formula used here is common in textbooks (e.g. equation 3.3 in Hahn 2018 or 2.2 in Coop 2020). This value is averaged by the number of sites.
Often genomes will be all of the genomes in a subpopulation, or in the entire population, but any genome vector may be used.  By default, with muts=NULL, the calculation is based upon all mutations in the simulation; the calculation can instead be based upon a subset of mutations, such as mutations of a specific mutation type, by passing the desired vector of mutations for muts.
The calculation can be narrowed to apply to only a window – a subrange of the full chromosome – by passing the interval bounds [start, end] for the desired window.  In this case, the vector of mutations used for the calculation will be subset to include only mutations within the specified window.  The default behavior, with start and end of NULL, provides the genome-wide pi.
The implementation of calcPiTheta(), viewable with functionSource(), treats every mutation as independent in the heterozygosity calculations.  One could regard this choice as embodying an infinite-sites interpretation of the segregating mutations, as with calcHeterozygosity().  Indeed, finite-sites models of pi have been derived (Tajima 1996) though are not used here.  In most biologically realistic models, such genetic states will be quite rare, and so the impact of this assumption will be negligible; however, in some models this distinction may be important.  See calcPairHeterozygosity() for further discussion.  This function was written by Nick Bailey (currently affiliated with the CNRS and Laboratory of Biometry and Evolutionary Biology at University Lyon 1), based on code in calcWattersonsTheta, and with helpful input from Peter Ralph.
