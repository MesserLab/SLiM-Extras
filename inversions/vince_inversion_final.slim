initialize() {
  defineConstant("seed", getSeed());
  defineConstant("region_length", 1000000);
  defineConstant("inv_length", 500000);
  defineConstant("inv_start", asInteger(region_length/2 - inv_length/2));
  defineConstant("inv_end", asInteger(region_length/2 + inv_length/2));
  defineConstant("N", 500);
  defineConstant("rbp", 1e-8);

  defineConstant("treeseq_file", "inversion_" + rbp + ".trees");
  initializeTreeSeq();

  initializeMutationRate(0);
  initializeMutationType("m1", 0.5, "f", 0.0);  // inversion marker
  initializeMutationType("m2", 0.5, "f", 0.0);  // inversion marker
  initializeMutationType("m3", 0.5, "f", 0.0);  // neutral sites 
  m1.convertToSubstitution = T;
  m2.convertToSubstitution = T;
  m1.color = "red";
  m2.color = "red";

  initializeGenomicElementType("g1", m3, 1.0);
  initializeGenomicElement(g1, 0, asInteger(region_length)-1);
  initializeRecombinationRate(rbp);
}

fitness(m2) {
  // the frequency dependent system in the SLiM manual
  f = sim.mutationFrequencies(NULL, mut);
  return 1.0 - (f - 0.5)*0.2;
}

1 early() {
  sim.addSubpop("p1", N);

  // give some genomes an inversion
  inverted = sample(p1.genomes, 100);
  inverted.addNewDrawnMutation(m1, inv_start);
  inverted.addNewDrawnMutation(m2, inv_end);
}

5000 late() {
  catn(sim.generation);
  metadata = Dictionary();
  metadata.setValue("inversion_coords", c(inv_start, inv_end));
  metadata.setValue("N", N);
  metadata.setValue("rbp", rbp);
  metadata.setValue("region_length", region_length);
  sim.treeSeqOutput(treeseq_file, metadata=metadata);
  sim.simulationFinished();
}

recombination() {
  gm1 = genome1.containsMarkerMutation(m1, inv_start);
  gm2 = genome2.containsMarkerMutation(m1, inv_start);
  if (!(gm1 | gm2)) {
    // homozygote non-inverted
    return F;
  }
  inInv = (breakpoints > inv_start) & (breakpoints <= inv_end);
  if (sum(inInv) % 2 == 0) {
    return F;
  }
  if (gm1 & gm2) {
    // homozygote inverted
    left = (breakpoints == inv_start);
    right = (breakpoints == inv_end + 1);
    breakpoints = sort(c(breakpoints[!(left | right)], c(inv_start, inv_end + 1)[c(sum(left) > 0, sum(right) > 0)]));
    return T;
  } else {
    // heterozygote inverted: resample to get on an even number of breakpoints
    // this is *recursive*: it calls the recombination callback again!
    breakpoints = sim.chromosome.drawBreakpoints(individual);
  }
  return T;
}